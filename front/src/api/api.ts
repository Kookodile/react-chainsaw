/* tslint:disable */
/* eslint-disable */
/**
 * ReactChainsaw.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AddTodo
 */
export interface AddTodo {
    /**
     * 
     * @type {string}
     * @memberof AddTodo
     */
    'nom'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddTodo
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddTodo
     */
    'deadLine'?: string | null;
}
/**
 * 
 * @export
 * @interface EditTodo
 */
export interface EditTodo {
    /**
     * 
     * @type {string}
     * @memberof EditTodo
     */
    'nom'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EditTodo
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EditTodo
     */
    'deadLine'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof EditTodo
     */
    'eta'?: number;
}
/**
 * 
 * @export
 * @interface ToDo
 */
export interface ToDo {
    /**
     * 
     * @type {number}
     * @memberof ToDo
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ToDo
     */
    'nom'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ToDo
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ToDo
     */
    'dateCreation'?: string;
    /**
     * 
     * @type {string}
     * @memberof ToDo
     */
    'dateModification'?: string;
    /**
     * 
     * @type {string}
     * @memberof ToDo
     */
    'deadLine'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ToDo
     */
    'eta'?: number;
}

/**
 * ToDoApi - axios parameter creator
 * @export
 */
export const ToDoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AddTodo} [addTodo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTodos: async (addTodo?: AddTodo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ToDo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addTodo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTodos: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTodos', 'id', id)
            const localVarPath = `/ToDo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {EditTodo} [editTodo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editTodo: async (id: number, editTodo?: EditTodo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('editTodo', 'id', id)
            const localVarPath = `/ToDo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editTodo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getToDos: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ToDo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ToDoApi - functional programming interface
 * @export
 */
export const ToDoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ToDoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AddTodo} [addTodo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTodos(addTodo?: AddTodo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTodos(addTodo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTodos(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTodos(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {EditTodo} [editTodo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editTodo(id: number, editTodo?: EditTodo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ToDo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editTodo(id, editTodo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getToDos(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ToDo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getToDos(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ToDoApi - factory interface
 * @export
 */
export const ToDoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ToDoApiFp(configuration)
    return {
        /**
         * 
         * @param {AddTodo} [addTodo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTodos(addTodo?: AddTodo, options?: any): AxiosPromise<void> {
            return localVarFp.addTodos(addTodo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTodos(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTodos(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {EditTodo} [editTodo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editTodo(id: number, editTodo?: EditTodo, options?: any): AxiosPromise<ToDo> {
            return localVarFp.editTodo(id, editTodo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getToDos(options?: any): AxiosPromise<Array<ToDo>> {
            return localVarFp.getToDos(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ToDoApi - object-oriented interface
 * @export
 * @class ToDoApi
 * @extends {BaseAPI}
 */
export class ToDoApi extends BaseAPI {
    /**
     * 
     * @param {AddTodo} [addTodo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToDoApi
     */
    public addTodos(addTodo?: AddTodo, options?: AxiosRequestConfig) {
        return ToDoApiFp(this.configuration).addTodos(addTodo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToDoApi
     */
    public deleteTodos(id: number, options?: AxiosRequestConfig) {
        return ToDoApiFp(this.configuration).deleteTodos(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {EditTodo} [editTodo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToDoApi
     */
    public editTodo(id: number, editTodo?: EditTodo, options?: AxiosRequestConfig) {
        return ToDoApiFp(this.configuration).editTodo(id, editTodo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToDoApi
     */
    public getToDos(options?: AxiosRequestConfig) {
        return ToDoApiFp(this.configuration).getToDos(options).then((request) => request(this.axios, this.basePath));
    }
}


